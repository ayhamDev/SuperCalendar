function DomParser(t = String()) {
  return new DOMParser().parseFromString(t, "text/html").body.firstChild;
}
function StyleParser(t = String()) {
  return new DOMParser()
    .parseFromString(t, "text/html")
    .head.querySelector("style");
}
function Component(
  t = String(),
  e = {
    Render({
      self: t = document.querySelector("*"),
      data: e = {},
      root: a = document.querySelector("*"),
    }) {},
    Script({
      self: t = document.querySelector("*"),
      data: e = {},
      root: a = document.querySelector("*"),
    }) {},
    Style({
      self: t = document.querySelector("*"),
      data: e = {},
      root: a = document.querySelector("*"),
    }) {},
    shadowRoot: Boolean(!0),
    state: {},
  }
) {
  const { Render: a, Script: o, Style: s, data: r } = e;
  return (
    window.customElements.define(
      t.includes("-") ? t : `${PREFIX}-${t}`,
      class extends HTMLElement {
        constructor() {
          super();
          let { shadowRoot: t } = e;
          (null != t && null != t) || (t = !0),
            (this.shadowRootMode = t),
            1 == this.shadowRootMode && this.attachShadow({ mode: "open" });
        }
        connectedCallback() {
          for (const t in r)
            Object.hasOwnProperty.call(r, t) && (this.dataset[t] = r[t]);
          (this.obs = new MutationObserver(function (t) {
            t.forEach(function (t) {
              if ("attributes" === t.type) {
                if (1 == t.target.shadowRootMode) {
                  if (!t.attributeName.includes("data-")) return null;
                  t.target.shadowRoot.firstChild.remove(),
                    t.target.shadowRoot.append(
                      DomParser(
                        a({
                          root: t.target,
                          self: t.target.shadowRoot.firstChild,
                          data: t.target.dataset,
                        })
                      )
                    ),
                    t.target.shadowRoot.firstChild.append(
                      StyleParser(
                        `<style>${s({
                          root: t.target,
                          self: t.target.shadowRoot.firstChild,
                          data: t.target.dataset,
                        }).replace(/\s/g, "")}</style>`
                      )
                    ),
                    o({
                      root: t.target,
                      self: t.target.shadowRoot.firstChild,
                      data: t.target.dataset,
                    });
                }
                if (0 == t.target.shadowRootMode) {
                  if (!t.attributeName.includes("data-")) return null;
                  t.target.firstChild.remove(),
                    t.target.append(
                      DomParser(
                        a({
                          root: t.target,
                          self: t.target.firstChild,
                          data: t.target.dataset,
                        })
                      )
                    ),
                    t.target.firstChild.append(
                      StyleParser(
                        `<style>${s({
                          root: t.target,
                          self: t.target.firstChild,
                          data: t.target.dataset,
                        }).replace(/\s/g, "")}</style>`
                      )
                    ),
                    o({
                      root: t.target,
                      self: t.target.firstChild,
                      data: t.target.dataset,
                    });
                }
              }
            });
          })),
            this.obs.observe(this, { attributes: !0 }),
            1 == this.shadowRootMode &&
              (this.shadowRoot.append(
                DomParser(
                  a({
                    root: this,
                    self: this.shadowRoot.firstChild,
                    data: this.dataset,
                  })
                )
              ),
              this.shadowRoot.firstChild.append(
                StyleParser(
                  `<style>${s({
                    root: this,
                    self: this.shadowRoot.firstChild,
                    data: this.dataset,
                  }).replace(/\s/g, "")}</style>`
                )
              ),
              o({
                root: this,
                self: this.shadowRoot.firstChild,
                data: this.dataset,
              })),
            0 == this.shadowRootMode &&
              (this.append(
                DomParser(
                  a({ root: this, self: this.firstChild, data: this.dataset })
                )
              ),
              this.firstChild.append(
                StyleParser(
                  `<style>${s({
                    root: this,
                    self: this.firstChild,
                    data: this.dataset,
                  }).replace(/\s/g, "")}</style>`
                )
              ),
              o({ root: this, self: this.firstChild, data: this.dataset }));
        }
      }
    ),
    {
      Create(e) {
        const a = document.createElement(
          t.includes("-") ? t : `${PREFIX}-${t}`
        );
        if ("object" == typeof e)
          for (const t in e)
            Object.hasOwnProperty.call(e, t) && (a.dataset[t] = e[t]);
        return a;
      },
    }
  );
}
export default Component;
